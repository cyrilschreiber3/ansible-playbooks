---
- name: Import variables
  ansible.builtin.include_vars:
    file: "{{ module_dir }}/vars/install-nix-vars.ansible.yml"

- name: Stat nix-daemon.sh
  ansible.builtin.stat:
    path: /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
  register: nixdaemon_stat

- name: Get nix version
  ansible.builtin.shell: |
    . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
    nix --version
  ignore_errors: true
  changed_when: false
  when: nixdaemon_stat.stat.exists
  register: nix_version_output

- name: Set target nix version
  ansible.builtin.set_fact:
    nix_version: "{{ nix_version | default(2.29.1) }}"
  when: not (nix_version is defined)

- name: Set nix version on system
  ansible.builtin.set_fact:
    nix_version_on_system: "{{ (nix_version_output.stdout_lines[0] | split(' '))[2] }}"
  when: nixdaemon_stat.stat.exists and nix_version_output.rc == 0

- name: Download and run installer
  when: (not nix_version_on_system is defined) or nix_version_on_system != nix_version
  block:
    - name: Download installer
      ansible.builtin.get_url:
        url: "{{ installer_path }}"
        dest: /tmp
        mode: "0755"

    - name: Extract installer
      ansible.builtin.unarchive:
        src: /tmp/{{ nix_build }}.tar.xz
        remote_src: true
        dest: /tmp/

    - name: Uninistall the previous nix
      when: nix_version_on_system is defined and nix_version_on_system != nix_version
      block:
        - name: Disable nix socket
          ansible.builtin.service:
            name: nix-daemon.socket
            state: stopped
            enabled: false
          become: true

        - name: Disable nix service
          ansible.builtin.service:
            name: nix-daemon.service
            state: stopped
            enabled: false
          become: true

        - name: Remove Installed nix config files
          ansible.builtin.file:
            state: absent
            path: /etc/nix
          become: true

        - name: Stat bash.bashrc.backup-before-nix
          ansible.builtin.stat:
            path: /etc/bash.bashrc.backup-before-nix
          register: bash_bashrc_backup_stat

        - name: Restore bash.bashrc # noqa: command-instead-of-shell
          ansible.builtin.shell: mv /etc/bash.bashrc.backup-before-nix /etc/bash.bashrc
          become: true
          when: bash_bashrc_backup_stat.stat.exists
          changed_when: true

        - name: Stat zshrc.backup-before-nix
          ansible.builtin.stat:
            path: /etc/zshrc.backup-before-nix
          register: zshrc_backup_stat

        - name: Restore zshrc # noqa: command-instead-of-shell
          ansible.builtin.shell: mv /etc/zshrc.backup-before-nix /etc/zshrc
          become: true
          when: zshrc_backup_stat.stat.exists
          changed_when: true

        - name: Stat nix.sh
          ansible.builtin.stat:
            path: /etc/profile.d/nix.sh.backup-before-nix
          register: nixsh_backup_stat

        - name: Restore nix.sh # noqa:  command-instead-of-shell
          ansible.builtin.shell: mv /etc/profile.d/nix.sh.backup-before-nix /etc/profile.d/nix.sh
          become: true
          when: nixsh_backup_stat.stat.exists
          changed_when: true

    - name: Run the installer
      become: true
      ansible.builtin.shell:
        cmd: ./install --daemon </dev/null
        chdir: /tmp/{{ nix_build }}
      changed_when: true

- name: Enable flakes
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nix/nix.conf
    line: "experimental-features = nix-command flakes"
  when: flakes | default(true) | bool

- name: Add arbritrary nix config
  ansible.builtin.blockinfile:
    path: /etc/nix/nix.conf
    block: "{{ config }}"
  become: true
  when: config is defined

- name: Run nix commands
  ansible.builtin.shell: |
    . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
    {{ item }}
  changed_when: true
  loop: "{{ nix_commands }}"
  when: nix_commands is defined

- name: Add nix profile to user's shell configuration
  ansible.builtin.blockinfile:
    path: "{{ item }}"
    backup: yes
    create: true
    mode: "0644"
    marker: "# {mark} Nix profile configuration by Ansible"
    prepend_newline: true
    block: |
      if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
        . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
      fi
  loop:
    - "{{ ansible_env.HOME }}/.zshrc"
    - "{{ ansible_env.HOME }}/.bashrc"
  when: (configure_zsh | default(false) and item.endswith('zshrc')) or (configure_bash | default(false) and item.endswith('bashrc'))
